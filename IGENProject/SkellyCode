/*Code Information
Date: Arbitrary Day
Purpose: Take sensor readings from ESP32, send to da computer fo da processin
*/

//Define Libraries
    //Arduino
#include "Arduino.h"
    //ESP-32
#include "WiFi.h"
#include "BluetoothSerial.h"
    //MPU-6050
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

BluetoothSerial SerialBT;
Adafruit_MPU6050 mpu;

//Bluetooth setup
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

//Define Pins
    //Fingers: One for each hand's Thumb, Pointer, Middle
        int Finger_1 = ;
        int Finger_2 = ;
        int Finger_3 = ;
        int Finger_4 = ;
        int Finger_5 = ;
        int Finger_6 = ;
    //Buttons: Each serve different functions
        int POWER = ;
        int CALI =;
        int LOOP = ;

//Inputs
    int accel[3] = {0,0,0};
    int rotate[3] = {0,0,0};

//Outputs
    //LEDs
        int LED1 = ;
        int LED2 = ;
        int LED3 = ;

//Additional Constants
int Resistor = ;

//Functions
    //Calibration
        //Glove Calibrates after 3s --> Have LEDs as visual feedback
    void calibrate(){
        //Blink LEDS when not held still
            count = 0;
            while (accel != {0,0,0} || rotate != {0,0,0}){
                digitalWrite(LED1, HIGH);
                delay(1000);
                digitalWrite(LED1, LOW);
                delay(1000);
            }
        //Set accelerometer, gyroscope
            accel = {0,0,0};
            rotate = {0,0,0};
        //Turn LEDS on sequentially
            seconds = 1;
            while (seconds <= 3 ){
                int light = (255/3) * seconds;
                analogWrite(LED1, light);
                delay(1000);
            }
    }

    //Finger Flex
        //Value of given aspect changes with the flex of the finger
    void fingerflex(finger){
        newVal = analogRead(finger);
        return newVal;
    }


//Body
    //Setup Code, run once
void setup() {
    //Assigning Inputs
    pinMode(Finger_1, INPUT);
    pinMode(Finger_2, INPUT);
    pinMode(Finger_3, INPUT);
    pinMode(Finger_4, INPUT);
    pinMode(Finger_5, INPUT);
    pinMode(Finger_6, INPUT);
    //Assigning Outputs
    pinMode(LED1, OUTPUT);
    
    Serial.begin(115200);
    
    //MPU 6050 setup
    while (!Serial)
        delay(10); //Pause Zero, Leonardo, etc until serial console opens
        Serial.println("Adafruit MPU6050 test!");
        // Try to initialize!
            if (!mpu.begin()) {
                Serial.println("Failed to find MPU6050 chip");
                while (1) {
                    delay(10);
                }
            }
        Serial.println("MPU6050 Found!");
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
        Serial.print("Accelerometer range set to: ");
        switch (mpu.getAccelerometerRange()) {
            case MPU6050_RANGE_2_G:
                Serial.println("+-2G");
                break;
            case MPU6050_RANGE_4_G:
                Serial.println("+-4G");
                break;
            case MPU6050_RANGE_8_G:
                Serial.println("+-8G");
                break;
            case MPU6050_RANGE_16_G:
                Serial.println("+-16G");
                break;
        }
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
        Serial.print("Gyro range set to: ");
        switch (mpu.getGyroRange()) {
            case MPU6050_RANGE_250_DEG:
                Serial.println("+- 250 deg/s");
                break;
            case MPU6050_RANGE_500_DEG:
                Serial.println("+- 500 deg/s");
                break;
            case MPU6050_RANGE_1000_DEG:
                Serial.println("+- 1000 deg/s");
                break;
            case MPU6050_RANGE_2000_DEG:
                Serial.println("+- 2000 deg/s");
                break;
        }
    mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
        Serial.print("Filter bandwidth set to: ");
        switch (mpu.getFilterBandwidth()) {
            case MPU6050_BAND_260_HZ:
                Serial.println("260 Hz");
                break;
            case MPU6050_BAND_184_HZ:
                Serial.println("184 Hz");
                break;
            case MPU6050_BAND_94_HZ:
                Serial.println("94 Hz");
                break;
            case MPU6050_BAND_44_HZ:
                Serial.println("44 Hz");
                break;
            case MPU6050_BAND_21_HZ:
                Serial.println("21 Hz");
                break;
            case MPU6050_BAND_10_HZ:
                Serial.println("10 Hz");
                break;
            case MPU6050_BAND_5_HZ:
                Serial.println("5 Hz");
                break;
        }
    
    //Bluetooth setup
    SerialBT.begin("ESP32test"); //Bluetooth device name
    Serial.println("The device started, now you can pair it with bluetooth!");
}

    //Running code, run eternally
void loop() {
    //Calibrate when button pressed
    if (digitalRead(CALI)==HIGH) {
        calibrate();
    } 
    
    //Get Finger Sensor readings
        int L_Thumb = analogRead(Finger_1);
        int L_Pointer = analogRead(Finger_2);
        int L_Middle = analogRead(Finger_3);
        int R_Thumb = analogRead(Finger_4);
        int R_Pointer = analogRead(Finger_5);
        int R_Middle = analogRead(Finger_6);
    
    //Get Acceleration / Rotation readings
        sensors_event_t a, g, temp;
        mpu.getEvent(&a, &g, &temp);
    
    
    

    //Display sensor readings
        Serial.print("Acceleration X: "); Serial.print(a.acceleration.x);
        Serial.print(", Y: "); Serial.print(a.acceleration.y);
        Serial.print(", Z: "); Serial.print(a.acceleration.z);
        Serial.println(" m/s^2");

        Serial.print("Rotation X: "); Serial.print(g.gyro.x);
        Serial.print(", Y: "); Serial.print(g.gyro.y);
        Serial.print(", Z: "); Serial.print(g.gyro.z);
        Serial.println(" rad/s");

        Serial.print("Temperature: "); Serial.print(temp.temperature);
        Serial.println(" degC");
      
        
        
        
        
    //Send Bluetooth packet with all the above information
        //Reads the serial monitor and returns whatever is written
    if (Serial.available()) {
        SerialBT.write(Serial.read());
    }
    delay(20);
}

//Bluetooth code: https://www.instructables.com/ESP32-Bluetooth-Tutorial-How-to-Use-Inbuilt-Blueto/
//MPU6050 code: https://raw.githubusercontent.com/RuiSantosdotme/Random-Nerd-Tutorials/master/Projects/ESP/ESP_MPU6050_Basic_Demo.ino



